///
/// JHybridImagePerspectiveCropperSpec.cpp
/// This file was generated by nitrogen. DO NOT MODIFY THIS FILE.
/// https://github.com/mrousavy/nitro
/// Copyright Â© 2024 Marc Rousavy @ Margelo
///

#include "JHybridImagePerspectiveCropperSpec.hpp"

// Forward declaration of `Rectangle` to properly resolve imports.
namespace margelo::nitro::customcrop { struct Rectangle; }
// Forward declaration of `Point` to properly resolve imports.
namespace margelo::nitro::customcrop { struct Point; }

#include <string>
#include <functional>
#include "Rectangle.hpp"
#include "JFunc_void_Rectangle.hpp"
#include "JRectangle.hpp"
#include "Point.hpp"
#include "JPoint.hpp"
#include "JFunc_void_std__string.hpp"

namespace margelo::nitro::customcrop {

  jni::local_ref<JHybridImagePerspectiveCropperSpec::jhybriddata> JHybridImagePerspectiveCropperSpec::initHybrid(jni::alias_ref<jhybridobject> jThis) {
    return makeCxxInstance(jThis);
  }

  void JHybridImagePerspectiveCropperSpec::registerNatives() {
    registerHybrid({
      makeNativeMethod("initHybrid", JHybridImagePerspectiveCropperSpec::initHybrid),
    });
  }

  size_t JHybridImagePerspectiveCropperSpec::getExternalMemorySize() noexcept {
    static const auto method = _javaPart->getClass()->getMethod<jlong()>("getMemorySize");
    return method(_javaPart);
  }

  // Properties
  

  // Methods
  void JHybridImagePerspectiveCropperSpec::detectRectangleForImage(const std::string& image, const std::function<void(const Rectangle& /* rectangle */)>& onSuccess, const std::function<void(const std::string& /* message */)>& onError) {
    static const auto method = _javaPart->getClass()->getMethod<void(jni::alias_ref<jni::JString> /* image */, jni::alias_ref<JFunc_void_Rectangle::javaobject> /* onSuccess */, jni::alias_ref<JFunc_void_std__string::javaobject> /* onError */)>("detectRectangleForImage");
    method(_javaPart, jni::make_jstring(image), JFunc_void_Rectangle::fromCpp(onSuccess), JFunc_void_std__string::fromCpp(onError));
  }
  void JHybridImagePerspectiveCropperSpec::cropImage(const std::string& image, const Rectangle& rectangle, const std::function<void(const std::string& /* image */)>& onSuccess, const std::function<void(const std::string& /* message */)>& onError) {
    static const auto method = _javaPart->getClass()->getMethod<void(jni::alias_ref<jni::JString> /* image */, jni::alias_ref<JRectangle> /* rectangle */, jni::alias_ref<JFunc_void_std__string::javaobject> /* onSuccess */, jni::alias_ref<JFunc_void_std__string::javaobject> /* onError */)>("cropImage");
    method(_javaPart, jni::make_jstring(image), JRectangle::fromCpp(rectangle), JFunc_void_std__string::fromCpp(onSuccess), JFunc_void_std__string::fromCpp(onError));
  }

} // namespace margelo::nitro::customcrop

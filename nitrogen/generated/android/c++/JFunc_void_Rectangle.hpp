///
/// JFunc_void_Rectangle.hpp
/// This file was generated by nitrogen. DO NOT MODIFY THIS FILE.
/// https://github.com/mrousavy/nitro
/// Copyright Â© 2024 Marc Rousavy @ Margelo
///

#pragma once

#include <fbjni/fbjni.h>
#include <functional>

#include <functional>
#include "Rectangle.hpp"
#include "JRectangle.hpp"
#include "Point.hpp"
#include "JPoint.hpp"

namespace margelo::nitro::customcrop {

  using namespace facebook;

  /**
   * C++ representation of the callback Func_void_Rectangle.
   * This is a Kotlin `(rectangle: Rectangle) -> Unit`, backed by a `std::function<...>`.
   */
  struct JFunc_void_Rectangle final: public jni::HybridClass<JFunc_void_Rectangle> {
  public:
    static jni::local_ref<JFunc_void_Rectangle::javaobject> fromCpp(const std::function<void(const Rectangle& /* rectangle */)>& func) {
      return JFunc_void_Rectangle::newObjectCxxArgs(func);
    }

  public:
    void call(jni::alias_ref<JRectangle> rectangle) {
      return _func(rectangle->toCpp());
    }

  public:
    static auto constexpr kJavaDescriptor = "Lcom/margelo/nitro/customcrop/Func_void_Rectangle;";
    static void registerNatives() {
      registerHybrid({makeNativeMethod("call", JFunc_void_Rectangle::call)});
    }

  private:
    explicit JFunc_void_Rectangle(const std::function<void(const Rectangle& /* rectangle */)>& func): _func(func) { }

  private:
    friend HybridBase;
    std::function<void(const Rectangle& /* rectangle */)> _func;
  };

} // namespace margelo::nitro::customcrop

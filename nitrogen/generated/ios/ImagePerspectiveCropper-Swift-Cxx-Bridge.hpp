///
/// ImagePerspectiveCropper-Swift-Cxx-Bridge.hpp
/// This file was generated by nitrogen. DO NOT MODIFY THIS FILE.
/// https://github.com/mrousavy/nitro
/// Copyright Â© 2024 Marc Rousavy @ Margelo
///

#pragma once

// Forward declarations of C++ defined types
// Forward declaration of `HybridImagePerspectiveCropperSpec` to properly resolve imports.
namespace margelo::nitro::customcrop { class HybridImagePerspectiveCropperSpec; }
// Forward declaration of `Point` to properly resolve imports.
namespace margelo::nitro::customcrop { struct Point; }
// Forward declaration of `Rectangle` to properly resolve imports.
namespace margelo::nitro::customcrop { struct Rectangle; }

// Forward declarations of Swift defined types
// Forward declaration of `HybridImagePerspectiveCropperSpec_cxx` to properly resolve imports.
namespace ImagePerspectiveCropper { class HybridImagePerspectiveCropperSpec_cxx; }

// Include C++ defined types
#include "HybridImagePerspectiveCropperSpec.hpp"
#include "Point.hpp"
#include "Rectangle.hpp"
#include <NitroModules/Result.hpp>
#include <exception>
#include <functional>
#include <memory>
#include <string>

/**
 * Contains specialized versions of C++ templated types so they can be accessed from Swift,
 * as well as helper functions to interact with those C++ types from Swift.
 */
namespace margelo::nitro::customcrop::bridge::swift {

  // pragma MARK: std::function<void(const Rectangle& /* rectangle */)>
  /**
   * Specialized version of `std::function<void(const Rectangle&)>`.
   */
  using Func_void_Rectangle = std::function<void(const Rectangle& /* rectangle */)>;
  /**
   * Wrapper class for a `std::function<void(const Rectangle& / * rectangle * /)>`, this can be used from Swift.
   */
  class Func_void_Rectangle_Wrapper final {
  public:
    explicit Func_void_Rectangle_Wrapper(const std::function<void(const Rectangle& /* rectangle */)>& func): _function(func) {}
    explicit Func_void_Rectangle_Wrapper(std::function<void(const Rectangle& /* rectangle */)>&& func): _function(std::move(func)) {}
    inline void call(Rectangle rectangle) const {
      _function(rectangle);
    }
  private:
    std::function<void(const Rectangle& /* rectangle */)> _function;
  };
  inline Func_void_Rectangle create_Func_void_Rectangle(void* _Nonnull closureHolder, void(* _Nonnull call)(void* _Nonnull /* closureHolder */, Rectangle), void(* _Nonnull destroy)(void* _Nonnull)) {
    std::shared_ptr<void> sharedClosureHolder(closureHolder, destroy);
    return Func_void_Rectangle([sharedClosureHolder, call](const Rectangle& rectangle) -> void {
      call(sharedClosureHolder.get(), rectangle);
    });
  }
  inline std::shared_ptr<Func_void_Rectangle_Wrapper> share_Func_void_Rectangle(const Func_void_Rectangle& value) {
    return std::make_shared<Func_void_Rectangle_Wrapper>(value);
  }
  
  // pragma MARK: std::function<void(const std::string& /* message */)>
  /**
   * Specialized version of `std::function<void(const std::string&)>`.
   */
  using Func_void_std__string = std::function<void(const std::string& /* message */)>;
  /**
   * Wrapper class for a `std::function<void(const std::string& / * message * /)>`, this can be used from Swift.
   */
  class Func_void_std__string_Wrapper final {
  public:
    explicit Func_void_std__string_Wrapper(const std::function<void(const std::string& /* message */)>& func): _function(func) {}
    explicit Func_void_std__string_Wrapper(std::function<void(const std::string& /* message */)>&& func): _function(std::move(func)) {}
    inline void call(std::string message) const {
      _function(message);
    }
  private:
    std::function<void(const std::string& /* message */)> _function;
  };
  inline Func_void_std__string create_Func_void_std__string(void* _Nonnull closureHolder, void(* _Nonnull call)(void* _Nonnull /* closureHolder */, std::string), void(* _Nonnull destroy)(void* _Nonnull)) {
    std::shared_ptr<void> sharedClosureHolder(closureHolder, destroy);
    return Func_void_std__string([sharedClosureHolder, call](const std::string& message) -> void {
      call(sharedClosureHolder.get(), message);
    });
  }
  inline std::shared_ptr<Func_void_std__string_Wrapper> share_Func_void_std__string(const Func_void_std__string& value) {
    return std::make_shared<Func_void_std__string_Wrapper>(value);
  }
  
  // pragma MARK: std::shared_ptr<margelo::nitro::customcrop::HybridImagePerspectiveCropperSpec>
  /**
   * Specialized version of `std::shared_ptr<margelo::nitro::customcrop::HybridImagePerspectiveCropperSpec>`.
   */
  using std__shared_ptr_margelo__nitro__customcrop__HybridImagePerspectiveCropperSpec_ = std::shared_ptr<margelo::nitro::customcrop::HybridImagePerspectiveCropperSpec>;
  std::shared_ptr<margelo::nitro::customcrop::HybridImagePerspectiveCropperSpec> create_std__shared_ptr_margelo__nitro__customcrop__HybridImagePerspectiveCropperSpec_(void* _Nonnull swiftUnsafePointer);
  void* _Nonnull get_std__shared_ptr_margelo__nitro__customcrop__HybridImagePerspectiveCropperSpec_(std__shared_ptr_margelo__nitro__customcrop__HybridImagePerspectiveCropperSpec_ cppType);
  
  // pragma MARK: std::weak_ptr<margelo::nitro::customcrop::HybridImagePerspectiveCropperSpec>
  using std__weak_ptr_margelo__nitro__customcrop__HybridImagePerspectiveCropperSpec_ = std::weak_ptr<margelo::nitro::customcrop::HybridImagePerspectiveCropperSpec>;
  inline std__weak_ptr_margelo__nitro__customcrop__HybridImagePerspectiveCropperSpec_ weakify_std__shared_ptr_margelo__nitro__customcrop__HybridImagePerspectiveCropperSpec_(const std::shared_ptr<margelo::nitro::customcrop::HybridImagePerspectiveCropperSpec>& strong) { return strong; }
  
  // pragma MARK: Result<void>
  using Result_void_ = Result<void>;
  inline Result_void_ create_Result_void_() {
    return Result<void>::withValue();
  }
  inline Result_void_ create_Result_void_(const std::exception_ptr& error) {
    return Result<void>::withError(error);
  }

} // namespace margelo::nitro::customcrop::bridge::swift
